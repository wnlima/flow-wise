version: '3.8'

volumes:
  postgres_data:
  redis_data:

services:
  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo

  tempo:
    # Tempo is used for distributed tracing
    container_name: tempo
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./infra/observability/scripts/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200:3200" # tempo
      - "4317:4317" # otlp grpc
      - "4318:4318" # otlp http
      - "9411"   # zipkin
    depends_on:
      - init
  otel-collector:
    # OpenTelemetry Collector is used to collect and export telemetry data
    container_name: otel-collector
    image: otel/opentelemetry-collector:0.86.0
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./infra/observability/scripts/otel-collector.yaml:/etc/otel-collector.yaml
    depends_on:
      - tempo

  prometheus:
    # Prometheus is used for metrics collection
    container_name: prometheus
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - ./infra/observability/scripts/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"

  loki:
    # Loki is used for log aggregation
    container_name: loki
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    # Promtail is used to collect logs and send them to Loki
    container_name: promtail
    image: grafana/promtail:2.9.2
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml

  grafana:
    container_name: grafana
    image: grafana/grafana:11.0.0
    volumes:
      - ./infra/observability/scripts/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
  postgres-db:
    image: postgres:15
    container_name: flowwise-postgres-db
    environment:
      POSTGRES_USER: flowwise_user
      POSTGRES_PASSWORD: flowwise_password
      POSTGRES_DB: flowwise_master_db # Master DB, specific DBs created by init script
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres-init:/docker-entrypoint-initdb.d # Script to create specific databases
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U flowwise_user -d flowwise_master_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: flowwise-rabbitmq
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: flowwise_user # Considere alterar para produção
      RABBITMQ_DEFAULT_PASS: flowwise_password # Considere alterar para produção
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis: # Redis is used for caching and session storage
    image: redis:latest
    container_name: flowwise-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped